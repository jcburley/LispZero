Z.lisp:19: lisp-zero-single.c:605: Searching for `defglobal' in:
((.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:19: lisp-zero-single.c:605: Searching for `quote' in:
((.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:19: lisp-zero-single.c:605: Searching for `quote' in:
((.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:25: lisp-zero-single.c:605: Searching for `defglobal' in:
((onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:25: lisp-zero-single.c:605: Searching for `quote' in:
((onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:25: lisp-zero-single.c:605: Searching for `quote' in:
((onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:32: lisp-zero-single.c:605: Searching for `defglobal' in:
((null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:32: lisp-zero-single.c:605: Searching for `quote' in:
((null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:32: lisp-zero-single.c:605: Searching for `quote' in:
((null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:55: lisp-zero-single.c:605: Searching for `defglobal' in:
((list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:55: lisp-zero-single.c:605: Searching for `quote' in:
((list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:55: lisp-zero-single.c:605: Searching for `quote' in:
((list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:66: lisp-zero-single.c:605: Searching for `defglobal' in:
((applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:66: lisp-zero-single.c:605: Searching for `quote' in:
((applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:66: lisp-zero-single.c:605: Searching for `quote' in:
((applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:69: lisp-zero-single.c:605: Searching for `defun' in:
((defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `defglobal' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `list' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cond' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `null' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `onelet' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cond' in:
((arg (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `atom' in:
((arg (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `arg' in:
((arg (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((arg (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((arg (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `apply' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `me' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `me' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cond' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `null' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `onelet' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ()))))) (env (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cond' in:
((arg (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `atom' in:
((arg (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `arg' in:
((arg (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((arg (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((arg (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `applied' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `onelet' in:
((me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))))) (env (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `onelet' in:
((params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))))) (env (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `onelet' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cons' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `eval' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `env' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cdr' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (formlist (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body))))))))) (env (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `quote' in:
((argsname . formlist) (params x) (me (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (formlist (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist)))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me