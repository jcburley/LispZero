Z.lisp:19: lisp-zero-single.c:605: Searching for `defglobal' in:
((.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:19: lisp-zero-single.c:605: Searching for `quote' in:
((.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:19: lisp-zero-single.c:605: Searching for `quote' in:
((.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:25: lisp-zero-single.c:605: Searching for `defglobal' in:
((onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:25: lisp-zero-single.c:605: Searching for `quote' in:
((onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:25: lisp-zero-single.c:605: Searching for `quote' in:
((onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:32: lisp-zero-single.c:605: Searching for `defglobal' in:
((null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:32: lisp-zero-single.c:605: Searching for `quote' in:
((null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:32: lisp-zero-single.c:605: Searching for `quote' in:
((null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:55: lisp-zero-single.c:605: Searching for `defglobal' in:
((list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:55: lisp-zero-single.c:605: Searching for `quote' in:
((list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:55: lisp-zero-single.c:605: Searching for `quote' in:
((list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:66: lisp-zero-single.c:605: Searching for `defglobal' in:
((applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:66: lisp-zero-single.c:605: Searching for `quote' in:
((applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:66: lisp-zero-single.c:605: Searching for `quote' in:
((applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

()
Z.lisp:69: lisp-zero-single.c:605: Searching for `defun' in:
((defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `defglobal' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `car' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `formlist' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `list' in:
((me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `cond' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `null' in:
((me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*))

Z.lisp:69: lisp-zero-single.c:605: Searching for `onelet' in:
((me (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (formlist formlist) (env (me (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (formlist (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))) (env (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (me (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (formlist caar (x) (car (car x))) (env (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) (eval (car formlist) env))) (quote (cond ((atom arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet (me formlist env) (eval (eval (car (cdr formlist)) env) (cons (cons (eval (car (car (car formlist))) env) (eval (car (cdr (car (car formlist)))) env)) env))) (.symbol_dump . *COMPILED*) (defglobal . *COMPILED*) (apply . *COMPILED*) (eval . *COMPILED*) (cond . *COMPILED*) (cdr . *COMPILED*) (car . *COMPILED*) (cons . *COMPILED*) (eq . *COMPILED*) (atom . *COMPILED*) (quote . *COMPILED*)) (defun (me formlist env) (defglobal (car formlist) (list (quote (me formlist env)) (applied (car (cdr formlist)) (quote formlist) (quote env) (car (cdr (cdr formlist))))))) (applied (me formlist env) (onelet (((quote params) (eval (car formlist) env))) (quote (onelet (((quote argsname) (eval (car (cdr formlist)) env))) (quote (onelet (((quote envname) (eval (car (cdr (cdr formlist))) env))) (quote (onelet (((quote body) (eval (car (cdr (cdr (cdr formlist)))) env))) (quote (cond ((null params) body) ((quote t) (list (quote onelet) (list (list (list (quote quote) (car params)) (list (quote eval) (list (quote car) argsname) envname))) (list (quote quote) (applied (cdr params) (list (quote cdr) argsname) envname body)))))))))))))) (list (me formlist env) (cond ((null formlist) (quote ())) ((quote t) (cons (eval (car formlist) env) (apply me me (cdr formlist) env))))) (null (me formlist env) (onelet (((quote arg) ( list (car formlist) env))) (quote (cond (( list arg) (eq arg (quote ()))) ((quote t) (quote ())))))) (onelet unexpected fault address 0x0
fatal error: fault
[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x4a5014]

goroutine 1 [running]:
runtime.throw(0x4ee024, 0x5)
	/usr/local/go/src/runtime/panic.go:616 +0x81 fp=0xc420167260 sp=0xc420167240 pc=0x427c11
runtime.sigpanic()
	/usr/local/go/src/runtime/signal_unix.go:395 +0x211 fp=0xc4201672b0 sp=0xc420167260 pc=0x43a251
main.atomp(...)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1155
main.listp(0x6465746365707865, 0x4d8d00)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1172 +0x384 fp=0xc420167420 sp=0xc4201672b0 pc=0x4a5014
main.finalp(0x6465746365707865, 0x6465746365707865)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1177 +0x5e fp=0xc420167530 sp=0xc420167420 pc=0x4a509e
main.quotep(0xc4200aae40, 0xc420167800)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1680 +0x80 fp=0xc4201675e0 sp=0xc420167530 pc=0x4a8f70
main.object_write(0xc42009c2e0, 0xc4200aae40)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1706 +0x562 fp=0xc4201678c0 sp=0xc4201675e0 pc=0x4a9672
main.object_write(0xc42009c2e0, 0xc4200ab8c0)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1720 +0x642 fp=0xc420167ba0 sp=0xc4201678c0 pc=0x4a9752
main.object_write(0xc42009c2e0, 0xc420110f60)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1720 +0x642 fp=0xc420167e80 sp=0xc420167ba0 pc=0x4a9752
main.object_write(0xc42009c2e0, 0xc4203ede10)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1720 +0x642 fp=0xc420168160 sp=0xc420167e80 pc=0x4a9752
main.binding_lookup(0xc420111030, 0xc4200aac60, 0xc4203ede40, 0x0)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1393 +0xa50 fp=0xc4201684e0 sp=0xc420168160 pc=0x4a77d0
main.binding_for(0xc420111030, 0xc4200aac60, 0xc4203ede40, 0xc42016868c)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1742 +0x5a fp=0xc4201685c8 sp=0xc4201684e0 pc=0x4a9afa
main.eval(0xc420111030, 0xc420111230, 0xc4203ede40, 0xc4203f8740)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1764 +0x882 fp=0xc420168850 sp=0xc4201685c8 pc=0x4aa572
main.eval(0xc420111030, 0xc420111950, 0xc4203ede40, 0xc4203f85c0)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1768 +0x4d3 fp=0xc420168ad8 sp=0xc420168850 pc=0x4aa1c3
main.apply(0xc420111030, 0xc420111990, 0xc420111990, 0xc42013a960, 0xc4202f57a0, 0x10)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1853 +0x485 fp=0xc420168ba0 sp=0xc420168ad8 pc=0x4ab825
main.eval(0xc420111030, 0xc42013a970, 0xc4202f57a0, 0xc42037b5a0)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1778 +0x7ed fp=0xc420168e28 sp=0xc420168ba0 pc=0x4aa4dd
main.f_cond(0xc4200aa910, 0xc42013afb0, 0xc4202f57a0, 0xc420168ff4)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1969 +0x487 fp=0xc420168fa0 sp=0xc420168e28 pc=0x4ad237
main.eval(0xc4200aa910, 0xc42013afc0, 0xc4202f57a0, 0xc420300620)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1776 +0x793 fp=0xc420169228 sp=0xc420168fa0 pc=0x4aa483
main.apply(0xc42013a670, 0xc42013b000, 0xc42013b000, 0xc4201a11f0, 0xc42020c3e0, 0x10)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1853 +0x485 fp=0xc4201692f0 sp=0xc420169228 pc=0x4ab825
main.eval(0xc42013a670, 0xc4201a1200, 0xc42020c3e0, 0xc4201ee970)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1778 +0x7ed fp=0xc420169578 sp=0xc4201692f0 pc=0x4aa4dd
main.f_defglobal(0xc4200aaa80, 0xc4201a1240, 0xc42020c3e0, 0xc420169814)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1998 +0x536 fp=0xc4201697c0 sp=0xc420169578 pc=0x4ad946
main.eval(0xc4200aaa80, 0xc4201a1250, 0xc42020c3e0, 0xc420209700)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1776 +0x793 fp=0xc420169a48 sp=0xc4201697c0 pc=0x4aa483
main.apply(0xc4201a0770, 0xc4201a1290, 0xc4201a1290, 0xc4201eeb40, 0xc4201ee8c0, 0x10)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1853 +0x485 fp=0xc420169b10 sp=0xc420169a48 pc=0x4ab825
main.eval(0xc4201a0770, 0xc4201eeb50, 0xc4201ee8c0, 0x0)
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:1778 +0x7ed fp=0xc420169d98 sp=0xc420169b10 pc=0x4aa4dd
main.main()
	/home/craig/.go/src/github.com/jcburley/lisp-zero-go/lisp-zero-single.go:2150 +0x480 fp=0xc420169f88 sp=0xc420169d98 pc=0x4afa80
runtime.main()
	/usr/local/go/src/runtime/proc.go:198 +0x212 fp=0xc420169fe0 sp=0xc420169f88 pc=0x429482
runtime.goexit()
	/usr/local/go/src/runtime/asm_amd64.s:2361 +0x1 fp=0xc420169fe8 sp=0xc420169fe0 pc=0x450851
